# == TESTBENCH SPECIFIC SOURCES DIRECTORY ==
TB_SRC_DIR=$(ROOT)/tb_sources
# ==========================================

# == PROJECT DIRECTORIES ==
SCRIPTS_DIR=$(ROOT)/scripts
DO_FILES_DIR=$(ROOT)/do_files
RUN_DO_DIR=$(DO_FILES_DIR)/run_files
WAVES_DO_DIR=$(DO_FILES_DIR)/waves
SCN_DIR=$(ROOT)/scenarios
SRC_DIR=$(ROOT)/sources

TRANSCRIPTS_DIR=$(HDL_SIMU_PATH)/$(PROJECT_NAME)/transcripts
WLF_DIR=$(HDL_SIMU_PATH)/$(PROJECT_NAME)/WLF
SCN_TXT_DIR=$(HDL_SIMU_PATH)/$(PROJECT_NAME)/scenarios
LOGS_DIR=$(HDL_SIMU_PATH)/$(PROJECT_NAME)/LOGS
COMPILE_LOGS_FILE=$(LOGS_DIR)/compilation.log
# =========================

# == GENERIC Testbench Configuratrion ==
RTL_Testbench_path?=
INC_DIR_TB_EN?=OFF
# ======================================

# == Config. ARGS by DEFAULT ==
VSIM_ARGS+=-t ps -default_radix hexadecimal -fsmdebug -title $(TEST)
VSIM_G_ARGS+=-G/tb_top/SCN_FILE_PATH=$(SCN_TXT_DIR)/$(TEST).txt
TB_LIB_TOP+=$(LIB_TB_TOP).tb_top
NO_WLF=OFF
GUI=ON
# =============================

# == VCOM ARGS Custom ==
VCOM_ARGS+=
# ======================

# == VLOG ARGS Custom ==
VLOG_ARGS+=
# ======================

# == Config Selection ==
ifeq ($(GUI), OFF)
	VSIM_ARGS+=-c
#else
#	VSIM_ARGS+=-view wave -title $(TEST) noview dataflow process
endif

# WLF by default
ifeq ($(NO_WLF), OFF)
  VSIM_ARGS+=-wlf $(WLF_DIR)/$(TEST).wlf
endif

# Enable Transcript
ifeq ($(TRANSCRIPT_EN), ON)
  TRANSCRIPT_ARGS+= -l $(TRANSCRIPTS_DIR)/$(TEST)_transcript.txt
  TRANSCRIPT_ARGS_FOR_LIST+= -l $(TRANSCRIPTS_DIR)/$(list)_transcript.txt
endif

# Enable Do File
ifeq ($(DO_FILES_EN), ON)
  RUN_ARGS+= -do $(RUN_DO_DIR)/$(TEST)_run.do
endif

# Permit unmatch virtual interface (Use when No custom Testbench Modules like UART-DATA_COLLECTOR are unused)
PERMIT_UNMATCHED_VIRTUAL_INTF ?= ON
ifeq ($(PERMIT_UNMATCHED_VIRTUAL_INTF), ON)
  VSIM_ARGS+=-permit_unmatched_virtual_intf
endif
# ======================

# == TESTBENCH VLOG ARGS ==
ifeq ($(INC_DIR_TB_EN), ON)
  VLOG_ARGS=$(foreach list,$(TB_MODULES_LIB_PATH),+incdir+$(RTL_Testbench_path)$(list))
endif
# =========================


print_generic_rules:
	@echo "== GenericMakefile rules =="
	@echo ""
	@echo "- Create HDL Temporary Directories :"
	@echo "make create_simulation_dir"
	@echo ""
	@echo "- Clean WORK directory :"
	@echo "make clean_work"
	@echo ""
	@echo "- Clean Transcripts :"
	@echo "make clean_transcripts"
	@echo ""
	@echo "- Clean WLFs :"
	@echo "make clean_wlf"
	@echo ""
	@echo "- Clean ALL directories in PROJECT_DIR :"
	@echo "make clean_all"
	@echo ""
	@echo " - Create Run do files for a TEST"
	@echo "make create_run_do_files [TEST=TEST_XX]"
	@echo ""
	@echo " - Create Wave do files for a TEST"
	@echo "make create_wave_do_files [TEST=TEST_XX]"
	@echo ""
	@echo "- Create Modelsim Libs :"
	@echo "make libs"
	@echo ""
	@echo "- Generate Scenario :"
	@echo "make generate_scn [TEST=TEST_XX]"
	@echo ""
	@echo "- Generate All Text Scenarii :"
	@echo "make generate_all_scn"
	@echo ""
	@echo "- Compile Design and Testbench :"
	@echo "make compile_all"
	@echo ""
	@echo ""
	@echo "- Check One Test :"
	@echo "make check_one_test [TEST=TEST_XX]"
	@echo ""
	@echo "- Check Multiple Test :"
	@echo "make check_multiple_test [TEST_LIST=\"TEST_XX TEST_YY TEST_ZZ\"]"


# Generic Commands

# Create Temporary Directory (WORKS - Transcripts - WLFs)

# Path of HDL Simulation - Need Absolute PATH
HDL_SIMU_PATH=/home/linux-jp/SIMULATION_VHDL

# == CREATE DIRECTORY for A NEW PROJECT ==
create_dir:
	cd $(ROOT); \
	mkdir do_files; \
	mkdir sources; \
	mkdir tb_sources; \
	mkdir scenarios; \
	cd ./do_files; \
	mkdir run_files; \
	mkdir waves; \

# ========================================

# == CREATE TEMPORARY WORK DIR. ==
create_temp_project:
	cd $(HDL_SIMU_PATH); \
	if [ ! -d $(PROJECT_NAME) ]; then \
	  mkdir $(PROJECT_NAME); \
	fi

create_temp_dir:
	cd $(HDL_SIMU_PATH)/$(PROJECT_NAME); \
	if [ ! -d transcripts ]; then \
	  mkdir transcripts; \
	fi

	cd $(HDL_SIMU_PATH)/$(PROJECT_NAME); \
	if [ ! -d WLF ]; then \
	  mkdir WLF; \
	fi

	cd $(HDL_SIMU_PATH)/$(PROJECT_NAME); \
	if [ ! -d scenarios ]; then \
	  mkdir scenarios; \
	fi

	cd $(HDL_SIMU_PATH)/$(PROJECT_NAME); \
	if [ ! -d LOGS ]; then \
	  mkdir LOGS; \
	fi



create_work:
	cd $(HDL_SIMU_PATH)/$(PROJECT_NAME); \
	if [ ! -d $(WORK_DIR) ]; then \
	  mkdir $(WORK_DIR); \
	fi

create_simulation_dir: create_temp_project create_temp_dir create_work
# ======================

# == REMOVE TEMP. DIR ==

clean_work:
	cd $(HDL_SIMU_PATH)/$(PROJECT_NAME)/$(WORK_DIR); \
	rm -rRf *;

clean_transcripts:
	cd $(HDL_SIMU_PATH)/$(PROJECT_NAME)/transcripts; \
	rm -rRf *;

clean_wlf:
	cd $(HDL_SIMU_PATH)/$(PROJECT_NAME)/WLF; \
	rm -rRf *;
clean_logs:
	cd $(HDL_SIMU_PATH)/$(PROJECT_NAME)/LOGS; \
	rm -rRf *;
	   
clean_all:
	if [ -d $(HDL_SIMU_PATH)/$(PROJECT_NAME) ]; then \
	   cd $(HDL_SIMU_PATH)/$(PROJECT_NAME); \
	   rm -rRf *;
	fi
# ======================


# == PREPARE MODELSIM LIBRARY ==
prepare_libs:
	if [ -d $(HDL_SIMU_PATH)/$(PROJECT_NAME)/$(WORK_DIR) ]; then \
	  cd $(HDL_SIMU_PATH)/$(PROJECT_NAME)/$(WORK_DIR); \
	  $(foreach list, $(LIB_LIST), $(vlib) ./$(list) >> $(COMPILE_LOGS_FILE);) \
	fi

create_libs:
	if [ -d $(HDL_SIMU_PATH)/$(PROJECT_NAME)/$(WORK_DIR) ]; then \
	  cd $(HDL_SIMU_PATH)/$(PROJECT_NAME)/$(WORK_DIR); \
	  $(foreach list, $(LIB_LIST), $(vmap) $(list) $(list) >> $(COMPILE_LOGS_FILE);) \
	fi


libs:  prepare_libs create_libs
# ===========================================

# VHD File Path initialized at ""
VHD_FILE_PATH?=

# V File path initialized at ""
V_FILE_PATH?=

# == COMPILE VHD-V Files ==
compile_tb_vhd_files:
	cd $(HDL_SIMU_PATH)/$(PROJECT_NAME)/$(WORK_DIR); \
	$(foreach list,$(SRC_TB_VHD),$(vcom) $(VCOM_ARGS) -work $(LIB_TB_TOP) $(VHD_FILE_PATH)$(list) >> $(COMPILE_LOGS_FILE);)\

compile_tb_v_files:
	cd $(HDL_SIMU_PATH)/$(PROJECT_NAME)/$(WORK_DIR); \
	$(foreach list,$(SRC_TB_V),$(vlog) $(VLOG_ARGS) -work $(LIB_TB_TOP) $(V_FILE_PATH)$(list) >> $(COMPILE_LOGS_FILE);)\

compile_design_vhd_files:
	cd $(HDL_SIMU_PATH)/$(PROJECT_NAME)/$(WORK_DIR); \
	$(foreach list,$(SRC_VHD),$(vcom) $(VCOM_ARGS) -work $(VHD_DESIGN_LIB) $(VHD_FILE_PATH)$(list) >> $(COMPILE_LOGS_FILE);)\

compile_design_v_files:
	cd $(HDL_SIMU_PATH)/$(PROJECT_NAME)/$(WORK_DIR); \
	$(foreach list,$(SRC_V),$(vlog) $(VLOG_ARGS) -work $(V_DESIGN_LIB) $(V_FILE_PATH)$(list) >> $(COMPILE_LOGS_FILE);)\
# ========================

# == COMPILE ALL ==
# compile_design and compile_testbench rules must be define in user Makefile
#compile_all : clean_all create_simulation_dir libs compile_design compile_testbench
#	make print_compile_logs_file
# =================

# == RUN VSIM TEST ==
# $(vsim) : Run Modelsim
# $(VSIM_ARGS) VSIM argument by default - Args can be added
# $(TB_LIB_TOP) Testbench Library to run with tb_top module
# $(LIB_ARGS) -L commandes with library to add. It must be configured in current Makefile
# $(TRANSCRIPT_ARGS) Transcript arguement if enabled
# $(VSIM_G_ARGS) Testbench Generic Arg. changed (Scenario)
# $(RUN_ARGS) add do file to run here
run_test: generate_scn
	cd $(HDL_SIMU_PATH)/$(PROJECT_NAME)/$(WORK_DIR); \
	$(vsim) $(VSIM_ARGS) $(TB_LIB_TOP) $(LIB_ARGS) $(TRANSCRIPT_ARGS) $(VSIM_G_ARGS) $(RUN_ARGS)
	@make check_one_test

# TEST_LIST must be pass as argument
VSIM_G_ARGS_FOR_LIST+=-G/tb_top/SCN_FILE_PATH=$(SCN_TXT_DIR)/$(list).txt
RUN_ARGS_FOR_LIST+= -do $(RUN_DO_DIR)/$(list)_run.do
run_multiple_tests: generate_all_scn
		    cd $(HDL_SIMU_PATH)/$(PROJECT_NAME)/$(WORK_DIR); \
		    $(foreach list, $(TEST_LIST), $(vsim) $(VSIM_ARGS) $(TB_LIB_TOP) $(LIB_ARGS) $(TRANSCRIPT_ARGS_FOR_LIST) $(VSIM_G_ARGS_FOR_LIST) $(RUN_ARGS_FOR_LIST);)
		    @make check_multiple_tests
# ===================


# == Generate Scenarii ==
# TEST variable must be used as argument
generate_scn:
	cd $(HDL_SIMU_PATH)/$(PROJECT_NAME)/scenarios; \
	python3 $(SCN_DIR)/$(SCN_LIB_DIR)/$(TEST).py; \
	
generate_all_scn :
	cd $(HDL_SIMU_PATH)/$(PROJECT_NAME)/scenarios; \
	$(foreach list, $(SCN_LIST), python3 $(SCN_DIR)/$(SCN_LIB_DIR)/$(list);) \
# =======================

# == Create Run Do Files ==
# TEST variable must be used as argument
create_run_do_files:
	if [ ! -e $(RUN_DO_DIR)/$(TEST)_run.do ] ; then \
	  echo do $(WAVES_DO_DIR)/$(TEST)_wave.do >> $(RUN_DO_DIR)/$(TEST)_run.do; \
	  echo run -all >> $(RUN_DO_DIR)/$(TEST)_run.do; \
	else \
	  rm $(RUN_DO_DIR)/$(TEST)_run.do; \
	  echo do $(WAVES_DO_DIR)/$(TEST)_wave.do >> $(RUN_DO_DIR)/$(TEST)_run.do; \
	  echo run -all >> $(RUN_DO_DIR)/$(TEST)_run.do; \
	fi		
# =====================

# == Create Wave Do Files Only if it does not exists ==
# TEST variable must be used as argument
create_wave_do_files:
	if [ ! -e $(WAVES_DO_DIR)/$(TEST)_wave.do ] ; then \
	  echo >> $(WAVES_DO_DIR)/$(TEST)_wave.do; \
	fi
# =====================================================

#test ! -f $(RUN_DO_DIR)/$(TEST)_run.do && touch $(RUN_DO_DIR)/$(TEST)_run.do
# == PRINT LOGS ==
print_compile_logs_file:
	cat $(COMPILE_LOGS_FILE) | sed -e ''/Errors/s//`printf "\033[31mErrors\033[0m"`/';'/Warnings/s//`printf "\033[38;2;255;191;20mWarnings\033[0m"`/';'/vcom/s//`printf "\033[36mvcom\033[0m"`/';'/vlog/s//`printf "\033[36mvlog\033[0m"`/';'/Warning:/s//`printf "\033[38;2;255;191;20mWarning:\033[0m"`/';'/\.vhd/s//`printf "\033[36m\.vhd\033[0m"`/';'/\.sv/s//`printf "\033[36m\.sv\033[0m"`/''	
#================

# == Check if Test is PASS or FAILED ==

# TEST must be pass as argument
check_one_test:	
	@sed -e '1,/# == Beginning of Sequencer == #/ d; /# == End of Test == #/,$$ d' $(TRANSCRIPTS_DIR)/$(TEST)_transcript.txt | grep -n "Error:*\|Failed*\|fail*" && echo $(TEST) : "\033[31mFAILED\033[0m" || echo $(TEST) : "\033[32mPASS\033[0m"
	
check_multiple_tests:
	@$(foreach list, $(TEST_LIST), sed -e '1,/# == Beginning of Sequencer == #/ d; /# == End of Test == #/,$$ d' $(TRANSCRIPTS_DIR)/$(list)_transcript.txt | grep -n "Error:*\|Failed*\|fail*" && echo $(list) : "\033[31mFAILED\033[0m" || echo $(list) : "\033[32mPASS\033[0m";) \
# =================================


# == Get list of simulation time from transcripts ==
SIMU_TIME=$$time_var
# TEST_GROUP must be pass as argument
simu_time_grep_cmd=tail $(TRANSCRIPTS_DIR)/$(TEST_GROUP)_*.txt | grep -o "\s[0-9]*\s[a-z][a-z]" | grep -o "[0-9]*\s[a-z][a-z]"
export_simu_time:
	export time_var_tmp="`$(simu_time_grep_cmd)`";\
	export time_var="`python /home/linux-jp/Documents/GitHub/Verilog/Testbench/scripts/python_scripts/str_to_simu_time.py "$$time_var_tmp"`"; \
	echo SIMU_TIME : $(SIMU_TIME); \



# ==================================================

# == Print Test List from a folder ==
print_test:
	@ls $(TEST_LIST) | grep [a-zA-Z0-9_]*.py$
	
# ===================================